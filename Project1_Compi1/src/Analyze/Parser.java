
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyze;

import java_cup.runtime.*;
import java.util.ArrayList;
import Classes.SintacticalError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Terminal.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\003\000\002\040" +
    "\004\000\002\040\003\000\002\037\004\000\002\037\004" +
    "\000\002\037\003\000\002\003\006\000\002\020\004\000" +
    "\002\020\002\000\002\035\006\000\002\035\007\000\002" +
    "\035\007\000\002\004\010\000\002\006\004\000\002\006" +
    "\003\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\010\005\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\005\000\002" +
    "\013\004\000\002\013\003\000\002\014\006\000\002\015" +
    "\005\000\002\015\003\000\002\016\005\000\002\016\005" +
    "\000\002\005\006\000\002\017\006\000\002\021\010\000" +
    "\002\023\004\000\002\023\002\000\002\024\010\000\002" +
    "\024\010\000\002\024\010\000\002\024\010\000\002\024" +
    "\010\000\002\025\005\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\005\000" +
    "\002\027\002\000\002\030\004\000\002\030\003\000\002" +
    "\031\011\000\002\036\005\000\002\033\005\000\002\033" +
    "\003\000\002\034\005\000\002\034\011\000\002\022\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\006\003\012\007\005\001\002\000\010\002" +
    "\ufffe\003\012\007\005\001\002\000\006\012\242\033\241" +
    "\001\002\000\016\002\ufff8\003\ufff8\007\ufff8\021\020\041" +
    "\015\042\016\001\002\000\004\002\237\001\002\000\012" +
    "\015\161\016\160\017\155\020\156\001\002\000\020\007" +
    "\uffdd\015\043\016\044\017\040\020\042\027\uffdd\036\041" +
    "\001\002\000\010\002\ufffb\003\ufffb\007\ufffb\001\002\000" +
    "\004\002\000\001\002\000\016\002\ufff8\003\ufff8\007\ufff8" +
    "\021\020\041\015\042\016\001\002\000\004\037\032\001" +
    "\002\000\004\037\027\001\002\000\010\002\ufffd\003\ufffd" +
    "\007\ufffd\001\002\000\004\037\023\001\002\000\016\002" +
    "\ufff8\003\ufff8\007\ufff8\021\020\041\015\042\016\001\002" +
    "\000\010\002\ufff9\003\ufff9\007\ufff9\001\002\000\004\014" +
    "\024\001\002\000\004\040\025\001\002\000\004\025\026" +
    "\001\002\000\016\002\ufff5\003\ufff5\007\ufff5\021\ufff5\041" +
    "\ufff5\042\ufff5\001\002\000\004\040\030\001\002\000\004" +
    "\025\031\001\002\000\016\002\ufff7\003\ufff7\007\ufff7\021" +
    "\ufff7\041\ufff7\042\ufff7\001\002\000\004\021\033\001\002" +
    "\000\004\040\034\001\002\000\004\025\035\001\002\000" +
    "\016\002\ufff6\003\ufff6\007\ufff6\021\ufff6\041\ufff6\042\ufff6" +
    "\001\002\000\006\007\uffd1\027\113\001\002\000\020\007" +
    "\uffdd\015\043\016\044\017\040\020\042\027\uffdd\036\041" +
    "\001\002\000\004\011\104\001\002\000\004\011\071\001" +
    "\002\000\004\011\064\001\002\000\004\011\057\001\002" +
    "\000\004\011\045\001\002\000\004\022\046\001\002\000" +
    "\006\005\047\021\052\001\002\000\006\023\uffea\024\uffea" +
    "\001\002\000\004\023\055\001\002\000\006\023\uffec\024" +
    "\053\001\002\000\006\023\uffeb\024\uffeb\001\002\000\006" +
    "\005\047\021\052\001\002\000\004\023\uffed\001\002\000" +
    "\004\025\056\001\002\000\020\007\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\027\uffdb\036\uffdb\001\002\000\004\022" +
    "\060\001\002\000\006\005\047\021\052\001\002\000\004" +
    "\023\062\001\002\000\004\025\063\001\002\000\020\007" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\027\uffdc\036\uffdc" +
    "\001\002\000\004\022\065\001\002\000\006\005\047\021" +
    "\052\001\002\000\004\023\067\001\002\000\004\025\070" +
    "\001\002\000\020\007\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\027\uffd8\036\uffd8\001\002\000\004\022\072\001\002" +
    "\000\010\021\076\034\073\035\075\001\002\000\010\023" +
    "\uffd3\024\uffd3\040\uffd3\001\002\000\004\023\102\001\002" +
    "\000\010\023\uffd4\024\uffd4\040\uffd4\001\002\000\010\023" +
    "\uffd5\024\uffd5\040\uffd5\001\002\000\006\023\uffd6\024\100" +
    "\001\002\000\010\021\076\034\073\035\075\001\002\000" +
    "\004\023\uffd7\001\002\000\004\025\103\001\002\000\020" +
    "\007\uffda\015\uffda\016\uffda\017\uffda\020\uffda\027\uffda\036" +
    "\uffda\001\002\000\004\022\105\001\002\000\006\005\047" +
    "\021\052\001\002\000\004\023\107\001\002\000\004\025" +
    "\110\001\002\000\020\007\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\027\uffd9\036\uffd9\001\002\000\006\007\uffde\027" +
    "\uffde\001\002\000\004\007\150\001\002\000\004\030\114" +
    "\001\002\000\004\021\117\001\002\000\006\007\uffcf\021" +
    "\117\001\002\000\004\007\uffd2\001\002\000\004\037\121" +
    "\001\002\000\004\032\124\001\002\000\010\021\076\034" +
    "\073\035\075\001\002\000\004\040\123\001\002\000\012" +
    "\024\uffcd\025\uffcd\026\uffcd\032\uffcd\001\002\000\004\037" +
    "\121\001\002\000\004\024\126\001\002\000\006\021\131" +
    "\037\121\001\002\000\004\032\140\001\002\000\004\025" +
    "\137\001\002\000\004\030\135\001\002\000\006\025\uffcb" +
    "\026\133\001\002\000\006\021\131\037\121\001\002\000" +
    "\004\025\uffcc\001\002\000\004\037\121\001\002\000\006" +
    "\025\uffca\026\uffca\001\002\000\006\007\uffce\021\uffce\001" +
    "\002\000\004\037\121\001\002\000\004\024\142\001\002" +
    "\000\004\021\143\001\002\000\004\030\144\001\002\000" +
    "\004\037\121\001\002\000\006\025\uffc9\026\uffc9\001\002" +
    "\000\004\007\uffd0\001\002\000\016\002\uffe0\003\uffe0\007" +
    "\uffe0\021\uffe0\041\uffe0\042\uffe0\001\002\000\004\031\151" +
    "\001\002\000\004\033\152\001\002\000\004\010\153\001" +
    "\002\000\016\002\uffc8\003\uffc8\007\uffc8\021\uffc8\041\uffc8" +
    "\042\uffc8\001\002\000\004\027\210\001\002\000\004\011" +
    "\202\001\002\000\004\011\175\001\002\000\014\015\161" +
    "\016\160\017\155\020\156\027\ufff2\001\002\000\004\011" +
    "\167\001\002\000\004\011\162\001\002\000\004\022\163" +
    "\001\002\000\006\005\047\021\052\001\002\000\004\023" +
    "\165\001\002\000\004\025\166\001\002\000\014\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\027\ufff1\001\002\000\004\022" +
    "\170\001\002\000\006\005\047\021\052\001\002\000\004" +
    "\023\172\001\002\000\004\025\173\001\002\000\014\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\027\ufff0\001\002\000\004" +
    "\027\ufff3\001\002\000\004\022\176\001\002\000\006\005" +
    "\047\021\052\001\002\000\004\023\200\001\002\000\004" +
    "\025\201\001\002\000\014\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\027\uffee\001\002\000\004\022\203\001\002\000\006" +
    "\005\047\021\052\001\002\000\004\023\205\001\002\000" +
    "\004\025\206\001\002\000\014\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\027\uffef\001\002\000\004\007\232\001\002\000" +
    "\004\030\211\001\002\000\004\021\214\001\002\000\004" +
    "\007\uffe9\001\002\000\006\007\uffe7\021\214\001\002\000" +
    "\004\032\215\001\002\000\006\005\216\021\221\001\002" +
    "\000\004\024\227\001\002\000\004\025\226\001\002\000" +
    "\006\025\uffe4\026\224\001\002\000\004\024\222\001\002" +
    "\000\004\005\223\001\002\000\006\025\uffe2\026\uffe2\001" +
    "\002\000\006\005\216\021\221\001\002\000\004\025\uffe5" +
    "\001\002\000\006\007\uffe6\021\uffe6\001\002\000\004\021" +
    "\230\001\002\000\006\025\uffe3\026\uffe3\001\002\000\004" +
    "\007\uffe8\001\002\000\004\031\234\001\002\000\016\002" +
    "\ufffa\003\ufffa\007\ufffa\021\ufffa\041\ufffa\042\ufffa\001\002" +
    "\000\004\012\235\001\002\000\004\010\236\001\002\000" +
    "\016\002\uffe1\003\uffe1\007\uffe1\021\uffe1\041\uffe1\042\uffe1" +
    "\001\002\000\004\002\001\001\002\000\010\002\ufffc\003" +
    "\ufffc\007\ufffc\001\002\000\004\013\247\001\002\000\004" +
    "\013\243\001\002\000\004\011\244\001\002\000\004\014" +
    "\245\001\002\000\004\010\246\001\002\000\012\015\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\001\002\000\004\011\250\001" +
    "\002\000\004\014\251\001\002\000\004\010\252\001\002" +
    "\000\020\007\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\027" +
    "\uffdf\036\uffdf\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\020\002\006\003\013\004\007\017\005\021" +
    "\010\037\003\040\012\001\001\000\016\003\013\004\007" +
    "\017\005\021\010\037\003\040\252\001\001\000\002\001" +
    "\001\000\006\020\237\035\020\001\001\000\002\001\001" +
    "\000\006\006\153\007\156\001\001\000\006\023\035\024" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\016\035\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\021" +
    "\035\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\111\001\001\000\006\023\110\024\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\047\011\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\053\011\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\060\011" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\065\011\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\073\026\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\100\026\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\105\011\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\146\001\001\000\002\001\001\000" +
    "\006\030\115\031\114\001\001\000\006\030\145\031\114" +
    "\001\001\000\002\001\001\000\004\036\117\001\001\000" +
    "\002\001\001\000\004\026\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\124\001\001\000\002\001" +
    "\001\000\010\033\127\034\131\036\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\133\034\131\036\126\001\001\000\002" +
    "\001\001\000\004\036\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\173\007\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\163\011\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\170" +
    "\011\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\176\011\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\232\001\001\000\002\001\001\000\006" +
    "\013\211\014\212\001\001\000\002\001\001\000\006\013" +
    "\230\014\212\001\001\000\002\001\001\000\006\015\216" +
    "\016\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\224\016\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Código javas
    public ArrayList<SintacticalError> erroresSintacticos = new ArrayList<>();

    public void syntax_error(Symbol sym) {
        erroresSintacticos.add(new SintacticalError(sym.left,sym.right,sym.value,Terminal.terminalNames[sym.sym]));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        erroresSintacticos.add(new SintacticalError("Error Sintáctico sin recuperar."));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= BLOCKS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOCKS ::= BLOCK BLOCKS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOCKS ::= BLOCK 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOCK ::= AFD FUNCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOCK ::= APD FUNCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOCK ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // AFD ::= AFDI ATRIBUTES_LIST TRANSITION AFDF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AFD",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCTIONS ::= FUNCTION FUNCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCTIONS ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCTION ::= TK_KW_VerAutomatas TK_Left_Parenthesis TK_Right_Parenthesis TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCTION ::= TK_KW_Desc TK_Left_Parenthesis TK_ID TK_Right_Parenthesis TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCTION ::= TK_ID TK_Left_Parenthesis TK_String TK_Right_Parenthesis TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AFDI ::= TK_LessT TK_KW_AFD TK_KW_Nombre TK_Equal TK_String TK_GreatherT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AFDI",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ATRIBUTES_LIST ::= ATRIBUTES ATRIBUTES_LIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES_LIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ATRIBUTES_LIST ::= ATRIBUTES 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES_LIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ATRIBUTES ::= TK_KW_NumberStates TK_Equal TK_Left_Brace STATES TK_Right_Brace TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ATRIBUTES ::= TK_KW_Alphabet TK_Equal TK_Left_Brace STATES TK_Right_Brace TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ATRIBUTES ::= TK_KW_InitialState TK_Equal TK_Left_Brace STATE TK_Right_Brace TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATRIBUTES ::= TK_KW_AcceptStates TK_Equal TK_Left_Brace STATES TK_Right_Brace TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATES ::= STATE TK_Coma STATES 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATES ::= STATE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATE ::= TK_ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATE ::= TK_Number 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TRANSITION ::= TK_KW_Transiciones TK_Colon TRANSITIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANSITION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TRANSITIONS ::= ONETRANSITION TRANSITIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANSITIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TRANSITIONS ::= ONETRANSITION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANSITIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ONETRANSITION ::= TK_ID TK_Arrow DECLARATIONS TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ONETRANSITION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARATIONS ::= DECLARATION TK_OR DECLARATIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARATIONS ::= DECLARATION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARATION ::= TK_Number TK_Coma TK_ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARATION ::= TK_ID TK_Coma TK_Number 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AFDF ::= TK_LessT TK_Slash TK_KW_AFD TK_GreatherT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AFDF",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // APD ::= APDI ATRIBUTES_LIST_AP TRANSITIONAP APDF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("APD",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // APDI ::= TK_LessT TK_KW_AP TK_KW_Nombre TK_Equal TK_String TK_GreatherT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("APDI",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATRIBUTES_LIST_AP ::= ATRIBUTES_AP ATRIBUTES_LIST_AP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES_LIST_AP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATRIBUTES_LIST_AP ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES_LIST_AP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATRIBUTES_AP ::= TK_KW_NumberStates TK_Equal TK_Left_Brace STATES TK_Right_Brace TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES_AP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATRIBUTES_AP ::= TK_KW_Alphabet TK_Equal TK_Left_Brace STATES TK_Right_Brace TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES_AP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATRIBUTES_AP ::= TK_KW_Simbols TK_Equal TK_Left_Brace SIMBOLS TK_Right_Brace TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES_AP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ATRIBUTES_AP ::= TK_KW_InitialState TK_Equal TK_Left_Brace STATES TK_Right_Brace TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES_AP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ATRIBUTES_AP ::= TK_KW_AcceptStates TK_Equal TK_Left_Brace STATES TK_Right_Brace TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTES_AP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIMBOLS ::= SIMBOL TK_Coma SIMBOLS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMBOLS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SIMBOLS ::= SIMBOL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMBOLS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SIMBOL ::= TK_ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMBOL",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SIMBOL ::= TK_Dollar 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMBOL",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SIMBOL ::= TK_Hash 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMBOL",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TRANSITIONAP ::= TK_KW_Transiciones TK_Colon TRANSITIONS_LIST_AP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANSITIONAP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TRANSITIONAP ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANSITIONAP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TRANSITIONS_LIST_AP ::= ONETRANSITIONAP TRANSITIONS_LIST_AP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANSITIONS_LIST_AP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TRANSITIONS_LIST_AP ::= ONETRANSITIONAP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANSITIONS_LIST_AP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ONETRANSITIONAP ::= TK_ID ENCAP TK_Arrow ENCAP TK_Coma PRODUCTIONS_AP TK_SemiColon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ONETRANSITIONAP",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ENCAP ::= TK_Left_Parenthesis SIMBOL TK_Right_Parenthesis 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENCAP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PRODUCTIONS_AP ::= PRODUCTION_AP TK_OR PRODUCTIONS_AP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCTIONS_AP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PRODUCTIONS_AP ::= PRODUCTION_AP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCTIONS_AP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PRODUCTION_AP ::= TK_ID TK_Colon ENCAP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCTION_AP",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PRODUCTION_AP ::= ENCAP TK_Arrow ENCAP TK_Coma TK_ID TK_Colon ENCAP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCTION_AP",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // APDF ::= TK_LessT TK_Slash TK_KW_AP TK_GreatherT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("APDF",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
